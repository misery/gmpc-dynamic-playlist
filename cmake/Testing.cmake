FIND_PROGRAM(MPD_BIN mpd)
IF(NOT MPD_BIN)
	MESSAGE(FATAL_ERROR "Binary 'mpd' is required for testing!")
ENDIF()

FIND_PROGRAM(GTESTER_BIN gtester)
IF(NOT GTESTER_BIN)
	MESSAGE(FATAL_ERROR "Binary 'gtester' is required for testing!")
ENDIF()

ADD_DEFINITIONS(-D MPD_BINARY="\\"${MPD_BIN}\\"")
SET_DIRECTORY_PROPERTIES(PROPERTIES COMPILE_DEFINITIONS G_LOG_DOMAIN="dynlist_tests")

ADD_LIBRARY(fixture SHARED fixture_gmpc.c fixture_mpd.c)
TARGET_LINK_LIBRARIES(fixture ${DEPS_LIBRARIES} ${LIBMPD_LIBRARIES})

MACRO(ADD_TEST_CONFIG target def file)
	SET(outfile "${PROJECT_BINARY_DIR}/tests/${file}")
	CONFIGURE_FILE(${file}.in ${outfile} @ONLY)

	SET_PROPERTY(TARGET ${target} APPEND PROPERTY COMPILE_DEFINITIONS "${def}=\"${outfile}\"")
ENDMACRO()

MACRO(ADD_TEST_DATA target test_name)
	ADD_TEST(${test_name} gtester -k --verbose ${target})
	SET(TEST_TARGETS "${TEST_TARGETS} ${target}")
	SET_TESTS_PROPERTIES(${test_name} PROPERTIES PASS_REGULAR_EXPRESSION "PASS")
	SET_TESTS_PROPERTIES(${test_name} PROPERTIES FAIL_REGULAR_EXPRESSION "FAIL")

	SET_TARGET_PROPERTIES(${target} PROPERTIES COMPILE_DEFINITIONS "")
	TARGET_LINK_LIBRARIES(${target} dynlist fixture ${DEPS_LIBRARIES} ${LIBMPD_LIBRARIES})
ENDMACRO()

MACRO(ADD_GTESTER targets dir)
	SET(XML_FILE "${PROJECT_BINARY_DIR}/gtester.xml")
	SET(GTESTER_CMD ${GTESTER_BIN} -k -q -o ${XML_FILE} ${targets})
	SEPARATE_ARGUMENTS(GTESTER_CMD)

	ADD_CUSTOM_COMMAND(OUTPUT ${XML_FILE} COMMAND ${GTESTER_CMD} WORKING_DIRECTORY ${dir})
	ADD_CUSTOM_TARGET(test.report DEPENDS ${XML_FILE})

	FIND_PROGRAM(XSLT_BIN xsltproc)
	IF(XSLT_BIN)
		SET(XSL_FILE "${TEST_DIR}/gtester.xsl")
		SET(XML_JUNIT_FILE "${PROJECT_BINARY_DIR}/gtester_junit.xml")
		SET(XSLT_CMD ${XSLT_BIN} -o ${XML_JUNIT_FILE} ${XSL_FILE} ${XML_FILE})

		ADD_CUSTOM_COMMAND(OUTPUT ${XML_JUNIT_FILE} COMMAND ${XSLT_CMD} DEPENDS ${XML_FILE})
		ADD_CUSTOM_TARGET(test.report.junit DEPENDS ${XML_JUNIT_FILE})
	ENDIF()
ENDMACRO()

#vim:set ts=4 sw=4:
